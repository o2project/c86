<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2018-08-29</date>
</articleinfo>
<section id="distributed-revision-control">
<title>分散型バージョン管理システム「Git」について</title>
<simpara>このように「ファイル名を変更するだけのバージョン管理」では、多人数でファイルを編集したいときに困る事になります。</simpara>
<simpara>また、内容を前のものに戻しづらい・戻せないという事が起こりやすいため、紅莉栖と岡部で作業したところが被ってしまい片方の変更点が消えた結果、どちらかが作業をやり直し……という事が起きます。</simpara>
<simpara>そこで、この書籍のテーマである「Git」が登場します。「Git」は「分散型バージョン管理システム」といわれるものです。</simpara>
<section id="_gitの概要">
<title>Gitの概要</title>
<simpara>上記でも書きましたが「Git」は「分散型バージョン管理システム」の一つです。他の分散型バージョン管理システムとして「Mercurial」「Bazaar」などがありますが、この書籍では特に触れません。</simpara>
<simpara>Git の読み方は「ギット」です。<footnote><simpara><literal><ulink url="http://dictionary.reference.com/browse/git</literal></simpara></footnote>イギリス英語のスラングで「バカ」「卑劣な」という意味があるそうです。なぜこの名前が付いたかはWikipediafootnote:">http://ja.wikipedia.org/wiki/Git#.E5.90.8D.E5.89.8D.E3.81.AE.E7.94.B1.E6.9D.A5</ulink> や、Git FAQ (英語)<footnote><simpara><ulink url="https://git.wiki.kernel.org/index.php/GitFaq#Why_the_.27Git.27_name.3F">https://git.wiki.kernel.org/index.php/GitFaq#Why_the_.27Git.27_name.3F</ulink></simpara></footnote> を見てみてください。</simpara>
<simpara>Git は「リポジトリ」という「ファイルのスナップショット<footnote><simpara>ソースコードなどを任意のタイミングで抜き出したもの。詳しくは <ulink url="http://e-words.jp/w/E382B9E3838AE38383E38397E382B7E383A7E38383E38388.html">http://e-words.jp/w/E382B9E3838AE38383E38397E382B7E383A7E38383E38388.html</ulink> を参照してください。</simpara></footnote>が保管されている場所」があります。</simpara>
<simpara>スナップショットを保存する方法ですが、Git には「コミット<footnote><simpara>第三章の「作業内容を記録する」で解説しています。</simpara></footnote>」という「スナップショットを任意のタイミングで保存する機能」があります。その機能を使う事により、自分がした作業を記録する事ができます。</simpara>
<simpara>この「コミット」ですが、Steins;Gate のゲームシステムで例えると「セーブ」と言えます。そして「セーブデータ」が「リポジトリ」です。</simpara>
<simpara>ただし Git の場合は、セーブデータの任意の場所に戻る事ができます。それは「特定のエンディングに進もうとしてセーブしておいたデータに、誤って別のデータをセーブしてしまっても元に戻せる」という事を意味します。</simpara>
<simpara>また Git で他の人と作業内容を共有したいという場合は、ネットワーク上に共有リポジトリを用意しておき、そこへ自分の作業内容を送信します。</simpara>
<simpara>作業内容の送信をする機能を「プッシュ<footnote><simpara>第三章の「リモートリポジトリに作業内容を送る」で解説しています。</simpara></footnote>」と言います。</simpara>
</section>
<section id="_gitの利点">
<title>Gitの利点</title>
<simpara>Git の概要でも書きましたが、作業した内容を作業前の状態に戻したいといったときでも「チェックアウト<footnote><simpara>第三章の「作業内容を無かった事にする」で解説しています。</simpara></footnote>」や「リバート<footnote><simpara>リバートについてはこの記事が詳しいです。「Gitを使いこなそう！知っておくと便利な使い方　～Tower2・SourceTree～ – ICS LAB <ulink url="http://ics-web.jp/lab/archives/3184">http://ics-web.jp/lab/archives/3184</ulink> 」</simpara></footnote>」という機能を使えば、手軽に戻す事ができます。</simpara>
<simpara>これによりファイルを編集する際に、ファイル名に日付などを追加してからコピーという事をしなくて済むので、編集すべきファイルがどれなのか分からなくなる問題が無くなります。</simpara>
<simpara>また、多人数での編集も「プル<footnote><simpara>第三章の「リモートリポジトリの変更内容を自分の PC 上のリポジトリに取り込む」で解説しています。</simpara></footnote>」という「自分の PC 上のリポジトリに、ネットワーク上にあるリポジトリの最新の内容を反映する機能」を使う事により、他の人が変更した点も取り込めます。</simpara>
<simpara>なので、同じファイルを編集してしまったために、どちらかの編集内容が消えてしまうという事が少なくなります。これで岡部と紅莉栖も喧嘩しなくなるでしょう。</simpara>
</section>
</section>
</article>
